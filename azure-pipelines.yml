name: GBlog-$(SourceBranchName)-$(Date:yyyyMMdd)-$(Rev:.r)

trigger:
- main

pr: none

pool:
  vmImage: ubuntu-latest

variables:
  artifact_name: website

jobs:
- job: Build
  displayName: Download and run Hugo
  workspace:
    clean: all
  timeoutInMinutes: 2
  variables:
    hugo_download_url: https://github.com/gohugoio/hugo/releases/download/v0.61.0/hugo_0.61.0_Linux-64bit.tar.gz
    hugo_archive: hugo.tar.gz
    hugo_build_path: $(System.DefaultWorkingDirectory)/$(artifact_name)
    sass_download_url: https://github.com/sass/dart-sass/releases/download/1.52.1/dart-sass-1.52.1-linux-x64.tar.gz
    sass_archive: sass.tar.gz
    sass_directory: $(hugo_build_path)/style
  steps:
  - bash: |
      echo Downloading Hugo
      wget --output-document $(hugo_archive) --tries 3 --no-verbose $(hugo_download_url)
      tar -xzvf $(hugo_archive) hugo
      rm $(hugo_archive)
      echo Hugo `./hugo version`
  - bash: |
      echo Running Hugo
      ./hugo --destination $(hugo_build_path) --environment production --cleanDestinationDir --gc --ignoreCache --log --minify --noChmod
      echo "Files and folders generated by Hugo:"
      ls $(hugo_build_path)
  - bash: |
      echo Downloading Sass
      wget --output-document $(sass_archive) --tries 3 --no-verbose $(sass_download_url)
      tar --extract --gzip --verbose --file $(sass_archive)
      mv dart-sass/* ./
      rm $(sass_archive)
      rm --dir dart-sass
      echo Sass `./sass --version`
  - bash: |
      echo Running Sass
      ./sass $(sass_directory):$(sass_directory) --style=compressed --no-source-map --stop-on-error
  - bash: |
      rm -r $(sass_directory)/components
      rm $(sass_directory)/*.scss
      echo "Files generated by Sass:"
      ls $(sass_directory)
  - publish: $(hugo_build_path)
    artifact: $(artifact_name)

- deployment: Deploy
  displayName: Deploy to server
  dependsOn: Build
  environment: GBlog-prod
  workspace:
    clean: all
  timeoutInMinutes: 2
  variables:
    artifact_path: $(Pipeline.Workspace)/$(artifact_name)
  strategy:
    runOnce:
      deploy:
        steps:
        # Specify download step in order to only download website artifact
        - download: current
          artifact: $(artifact_name)
        - bash: ls $(artifact_path)
        - task: FtpUpload@2
          inputs:
            credentialsOption: inputs
            serverUrl: $(ftp_server)
            username: $(ftp_user)
            password: $(ftp_password)
            rootDirectory: $(artifact_path)
            filePatterns: '**'
            remoteDirectory: /
            clean: true
            preservePaths: true
            trustSSL: true